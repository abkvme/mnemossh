name: Rust CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

# Set minimal permissions by default (principle of least privilege)
permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: cargo test --verbose
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy, rustfmt
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      # -D warnings treats all warnings as errors
      run: cargo clippy -- -D warnings

  build:
    name: Build Release Binaries
    needs: [test, lint]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: mnemossh
            asset_name: mnemossh-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: mnemossh
            asset_name: mnemossh-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: mnemossh
            asset_name: mnemossh-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: mnemossh
            asset_name: mnemossh-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: mnemossh.exe
            asset_name: mnemossh-windows-amd64.exe

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Setup cross-compilation for ARM64 Linux
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Prepare binary for upload
      shell: bash
      run: |
        mkdir -p ./artifacts
        cp ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ./artifacts/${{ matrix.asset_name }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ./artifacts/${{ matrix.asset_name }}
        
  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    # This job needs write permissions to create releases
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Generate release notes
      id: release_notes
      run: |
        echo "## MnemoSSH ${GITHUB_REF#refs/tags/}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "$(git log --pretty=format:'* %s' $(git describe --tags --abbrev=0 HEAD^)..HEAD)" >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/**/*
        body_path: RELEASE_NOTES.md
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install cargo-tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
          use-tool-cache: true
      
      - name: Generate coverage report
        run: |
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # The workflow ends after creating the GitHub release with all artifacts
  # Manual publishing to crates.io can be done after reviewing the release
